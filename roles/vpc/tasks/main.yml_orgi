---

# roles/vpc/tasks/main.yml


# First task : creating the VPC.

- name:               Create VPC
  ec2_vpc_net:
    name:             "{{ vpc_name }}"
    cidr_block:       "{{ vpc_cidr_block }}"
    region:           "{{ aws_region }}"
    state:            "present"
  register: my_vpc

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ my_vpc.vpc.id }}"

- name: debug VPC id
  debug:
    msg: "{{ vpc_id }}"

# Now let's create the subnets.
# Two public, one private.
# Both Public subnets are located in the different AZ.

- name:               Create Public Subneit [AZ-1]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_1_cidr }}"
    az:               "{{ aws_region }}a"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Public Subnet 1"
  register: my_public_subnet_az1

- name:               Set Public Subnet ID in variable [AZ-1]
  set_fact:
    public_subnet_az1_id: "{{ my_public_subnet_az1.subnet.id }}"

- name:               Create Public Subnet [AZ-2]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_2_cidr }}"
    az:               "{{ aws_region }}b"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Public Subnet 2"
  register: my_public_subnet_az2

- name:               Set Public Subnet ID in variable [AZ-2]
  set_fact:
    public_subnet_az2_id: "{{ my_public_subnet_az2.subnet.id }}"

- name:               Create Private Subnet
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ private_subnet_1_cidr }}"
    az:               "{{ aws_region }}a"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Private Subnet"
  register: my_private_subnet

- name:               Set Private Subnet ID in variable
  set_fact:
    private_subnet_id: "{{ my_private_subnet.subnet.id }}"


# VPC needs one Internet Gateway.

- name:               Create Internet Gateway for VPC
  ec2_vpc_igw:
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ aws_region }}"
    state:            "present"
  register: my_vpc_igw

- name:               Set Internet Gateway ID in variable
  set_fact:
    igw_id:           "{{ my_vpc_igw.gateway_id }}"


# Now we set up the Route Tables.
# We will have one RT for the public subnets,
# and one for the private subnet.
# Route Table for the public subnet will use the
# Internet Gateway.

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "Public"
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_id }}"

- name: Set up private subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "Private"
    subnets:
      - "{{ private_subnet_id }}"


# Finally, let's create the Security Groups.
# We will create two : one to attach to public instances,
# and one to attach to private instances.

- name: Create Main Security Group
  ec2_group:
    name: "External Access"
    description: "External Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_main_sg

- name: Set Main SG ID
  set_fact:
    main_sg_id: "{{ my_main_sg.group_id }}"

- name: Create an ec2 instance
  ec2:
    key_name: "{{ keypair }}"
    group_id: "{{ main_sg_id }}" # security group name
    instance_type: "{{ instance_type}}"
    image: "{{ ami }}"
    wait: true
    region: "{{ aws_region }}"
#    count: 1  # default
    exact_count: 1
    count_tag:
      Name: Demo
    instance_tags:
      Name: Demo
    vpc_subnet_id: "{{ public_subnet_az1_id }}" 
    assign_public_ip: yes
  register: ec2

- name: Update Main Security Group to allow Port
  ec2_group:
    name: "External Access"
    description: "External Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ my_ip }}/0"
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_main_sg

- name: Wait for the instances to boot by checking the ssh port
  wait_for: host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
  with_items: "{{ ec2.instances }}"

- name: Add new instances to host group
  add_host: hostname={{item.public_ip}} groupname=deploy
  with_items: "{{ ec2.instances }}"

- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item.public_ip }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
  with_items: "{{ ec2.instances }}"

- name: Create ELB Security Group
  ec2_group:
    name: "My ALB SG"
    description: "My ALB Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "443"
        to_port: "443"
        cidr_ip: "{{ my_ip }}/0"
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_alb_sg

- name: Set ALB SG ID
  set_fact:
    alb_sg_id: "{{ my_alb_sg.group_id }}"

- name: debug EC2 ids
  debug:
    msg: "{{ ec2.tagged_instances[0].id }}"

- name: Create Traget Group for ALB
  elb_target_group:
    name: mytargetgroup
    region: "{{ aws_region }}"
    protocol: https
    vpc_id: "{{ vpc_id }}"
    port: 443
    health_check_path: /
    successful_response_codes: "200,250-260"
    state: present
    targets:
      - Id: "{{ ec2.tagged_instances[0].id }}"
        Port: 80
    wait_timeout: 200
  register: my_target_group

- name: Set Target Group Name
  set_fact:
    target_grp_name: "{{ my_target_group.target_group_name }}"

- name: Create ALB
  elb_application_lb:
    name: myalb
    region: "{{ aws_region }}" 
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    security_groups: "{{ alb_sg_id }}"
    scheme: internet-facing
    listeners:
      - Protocol: HTTPS # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
        Port: 443 # Required. The port on which the load balancer is listening.
        # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
#        SslPolicy: ELBSecurityPolicy-2015-05
#        Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
#          - CertificateArn: arn:aws:iam::12345678987:server-certificate/test.domain.com
        DefaultActions:
          - Type: forward # Required. Only 'forward' is accepted at this time
            TargetGroupName: "{{ target_grp_name }}" # Required. The name of the target group
    state: present 
  register: my_alb

- name: debug ALB DNS
  debug:
    msg: "{{ my_alb.dns_name }}"


- name: Create Hosted Zone on Route53
  route53_zone:
    zone: test.sungardas.io
    state: present
    comment: this is test zone
  register: my_dns

- name: debug  DNS
  debug:
    msg: "{{ my_dns.result }}"

- name: Craete Record Set and Add ALB to DNS
  route53:
    command: create
    zone: "{{ my_dns.result.name }}"
    record: elb.test.sungardas.io
    type: A
    value: "{{ my_alb.dns_name }}"
    alias: True
    alias_hosted_zone_id: "{{ my_alb.canonical_hosted_zone_id }}"
  register: my_zone

- name: debug Zone
  debug:
    msg: "{{ my_zone }}"
