---

# roles/vpc/tasks/main.yml


# First task : creating the VPC.
# We are using the variables set in the vars.yml file.
# The module gives us back its result,
# which contains information about our new VPC. 
# We register it in the variable my_vpc.

- name:               Create VPC
  ec2_vpc_net:
    name:             "{{ vpc_name }}"
    cidr_block:       "{{ vpc_cidr_block }}"
    region:           "{{ aws_region }}"
    state:            "present"
  register: my_vpc

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ my_vpc.vpc.id }}"


# Now let's create the subnets.
# One public, one private.
# Both subnets are located in the same AZ.
# Again, we save their ids in variables.

- name:               Create Public Subneit [AZ-1]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_1_cidr }}"
    az:               "{{ aws_region }}a"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Public Subnet 1"
  register: my_public_subnet_az1

- name:               Set Public Subnet ID in variable [AZ-1]
  set_fact:
    public_subnet_az1_id: "{{ my_public_subnet_az1.subnet.id }}"

- name:               Create Public Subnet [AZ-2]
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_2_cidr }}"
    az:               "{{ aws_region }}b"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Public Subnet 2"
  register: my_public_subnet_az2

- name:               Set Public Subnet ID in variable [AZ-2]
  set_fact:
    public_subnet_az2_id: "{{ my_public_subnet_az2.subnet.id }}"

- name:               Create Private Subnet
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ private_subnet_1_cidr }}"
    az:               "{{ aws_region }}a"
    region:           "{{ aws_region }}"
    resource_tags:
      Name:           "Private Subnet"
  register: my_private_subnet

- name:               Set Private Subnet ID in variable
  set_fact:
    private_subnet_id: "{{ my_private_subnet.subnet.id }}"


# Every VPC needs at least one Internet Gateway.
# This component allows traffic between the VPC and the outside world.

- name:               Create Internet Gateway for VPC
  ec2_vpc_igw:
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ aws_region }}"
    state:            "present"
  register: my_vpc_igw

- name:               Set Internet Gateway ID in variable
  set_fact:
    igw_id:           "{{ my_vpc_igw.gateway_id }}"


# Now we set up the Route Tables.
# We will have one RT for the public subnet,
# and one for the private subnet.
# You can see that the Route Table for the private subnet
# will redirect default destinations to the NAT Gateway
# and the Route Table for the public subnet will use the
# Internet Gateway.
# 
# We don't see it here, but the Route Tables will also contain 
# a route for resources inside the VPC, so that if we need 
# to reach an internal resource, we don't go to the Internet
# Gateway or the NAT Gateway.

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "Public"
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_id }}"

- name: Set up private subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "Private"
    subnets:
      - "{{ private_subnet_id }}"


# Finally, let's create the Security Groups.
# We will create two : one to attach to public instances,
# and one to attach to private instances.

- name: Create Main Security Group
  ec2_group:
    name: "External Access"
    description: "External Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_main_sg

- name: Set Main SG ID
  set_fact:
    main_sg_id: "{{ my_main_sg.group_id }}"

- name: Create an ec2 instance
  ec2:
    key_name: "{{ keypair }}"
    group_id: "{{ main_sg_id }}" # security group name
    instance_type: "{{ instance_type}}"
    image: "{{ ami }}"
    wait: true
    region: "{{ aws_region }}"
    count: 1  # default
    count_tag:
      Name: Demo
    instance_tags:
      Name: Demo
    vpc_subnet_id: "{{ public_subnet_az1_id }}" 
    assign_public_ip: yes
  register: ec2

- name: Update Main Security Group to allow Port
  ec2_group:
    name: "External Access"
    description: "External Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ my_ip }}/0"
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_main_sg

- name: Wait for the instances to boot by checking the ssh port
  wait_for: host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
  with_items: "{{ ec2.instances }}"
#  with_items: ec2.instances

- name: Add new instances to host group
  add_host: hostname={{item.public_ip}} groupname=deploy
  with_items: "{{ ec2.instances }}"

- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item.public_ip }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
  with_items: "{{ ec2.instances }}"

- name: Create ELB Security Group
  ec2_group:
    name: "My ALB SG"
    description: "My ALB Access"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: "tcp"
        from_port: "443"
        to_port: "443"
        cidr_ip: "{{ my_ip }}/0"
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        cidr_ip: "{{ my_ip }}/0"
    tags:
      Name: "My Test SG"
  register: my_alb_sg

- name: Set ALB SG ID
  set_fact:
    alb_sg_id: "{{ my_alb_sg.group_id }}"

#- name: Upload SSL Cert to IAM
#  iam_cert:
#    name: test_ssl
#    state: present
#    cert: ../../../ssl/test.crt
#    key: ../../../ssl/key.rsa

#- name: Retrive IAM SSL Cert ARN
#  iam_server_certificate_facts:
#    name: dev-entrust
#  register: server_cert
#  failed_when: "{{ server_cert.results | length == 0 }}"

- name: Create ELB 
  ec2_elb_lb:
    name: aws-elb-demo
    state: present
    region: "{{ aws_region }}"
    security_group_ids: "{{ alb_sg_id }}"
    scheme: internet-facing
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
        proxy_protocol: True
      - protocol: https
        load_balancer_port: 443
        instance_protocol: http
        instance_port: 80 
        ssl_certificate_id: arn:aws:iam::442294194136:server-certificate/dev-entrust
#        ssl_certificate_id: "{{ server_cert.arn }}"
  register: my_alb

- name: Add EC2 Host to ALB
  ec2_elb:
    instance_id: "{{ item.id }}"
    ec2_elbs: "{{ my_alb }}"
    state: present
    region: "{{ aws_region }}" 
  with_items: "{{ ec2.instances }}"
